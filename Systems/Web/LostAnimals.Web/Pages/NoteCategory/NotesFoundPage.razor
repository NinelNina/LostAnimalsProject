@using LostAnimals.Web.Pages.NoteCategory.Models
@using LostAnimals.Web.Pages.NoteCategory.Services
@using LostAnimals.Web.Pages.Notes.Models
@using LostAnimals.Web.Pages.Notes.Services
@using LostAnimals.Web.Pages.Photo.Models
@using LostAnimals.Web.Pages.Photo.Services
@using LostAnimals.Web.Components
@inject INoteCategoryService NoteCategoryService
@inject INoteService NoteService
@inject IPhotoService PhotoService

@if (noteCategory != null){
    <MudText Typo="Typo.h3" GutterBottom="true">@noteCategory.CategoryName</MudText>

    @if (notes != null)
    {
        <MudContainer>
            @foreach (var note in notes)
            {
                <NoteCard Note="note" PhotosDictionary="photosDictionary" />
            }
        </MudContainer>
    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="align-items-center justify-content-center" />
    }
}
@code {
    [Parameter]
    public string CategoryName { get; set; }

    private NoteCategoryViewModel noteCategory;
    private IEnumerable<NoteViewModel> notes;
    private Dictionary<Guid, IEnumerable<PhotoStorageViewModel>> photosDictionary = new Dictionary<Guid, IEnumerable<PhotoStorageViewModel>>();

    protected override async Task OnInitializedAsync()
    {
        noteCategory = await NoteCategoryService.GetNoteCategoryByName(GetTranslatedCategoryName(CategoryName));
        if (noteCategory != null)
        {
            notes = noteCategory.Notes;
            await LoadPhotos();
        }
    }

    private Dictionary<string, string> categoryTranslations = new Dictionary<string, string>
    {
        { "lost", "Потери" },
        { "found", "Находки" }
    };

    private string GetTranslatedCategoryName(string categoryName)
    {
        if (categoryTranslations.TryGetValue(categoryName, out var translatedName))
        {
            return translatedName;
        }

        return string.Empty;
    }

    private async Task LoadPhotos()
    {
        if (notes != null)
        {
            var galleryIds = notes.Where(n => n.PhotoGalleryId.HasValue).Select(n => n.PhotoGalleryId.Value).Distinct();
            foreach (var galleryId in galleryIds)
            {
                var photos = await PhotoService.GetPhotosByGalleryId(galleryId);
                photosDictionary[galleryId] = photos;
            }
        }
    }
}
